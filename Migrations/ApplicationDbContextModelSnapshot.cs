// <auto-generated />
using System;
using BusServcies.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BusServices.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusServices.Models.BusCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("BusCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Standard seater buses",
                            IsActive = true,
                            Name = "Seater"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Comfortable sleeper buses",
                            IsActive = true,
                            Name = "Sleeper"
                        },
                        new
                        {
                            Id = 3,
                            Description = "High speed express buses",
                            IsActive = true,
                            Name = "Express"
                        });
                });

            modelBuilder.Entity("BusServices.Models.BusImage", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhotoId"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PhotoId");

                    b.HasIndex("EventId");

                    b.ToTable("BusImages");

                    b.HasData(
                        new
                        {
                            PhotoId = 1,
                            EventId = 1,
                            IsPrimary = true,
                            PublicId = "OIP_ma4xfs",
                            Url = "https://ts1.explicit.bing.net/th?id=OIP.7IFURQmvycxLNYYig8TiSgHaE8&pid=15.1"
                        },
                        new
                        {
                            PhotoId = 2,
                            EventId = 1,
                            IsPrimary = false,
                            PublicId = "OIP_3_jqikgp",
                            Url = "https://thfvnext.bing.com/th/id/OIP.TasbJC0pWiRaD-8dTvgi8wHaGW?w=226&h=193&c=7&r=0&o=7&cb=thfvnext&dpr=1.3&pid=1.7&rm=3"
                        },
                        new
                        {
                            PhotoId = 3,
                            EventId = 3,
                            IsPrimary = true,
                            PublicId = "OIP_2_wlazak",
                            Url = "https://thfvnext.bing.com/th/id/OIP.Z4oSl51ufLg-gKLKOAwgvwHaEK?w=333&h=187&c=7&r=0&o=7&cb=thfvnext&dpr=1.3&pid=1.7&rm=3"
                        },
                        new
                        {
                            PhotoId = 4,
                            EventId = 4,
                            IsPrimary = true,
                            PublicId = "bus_ifrwmm",
                            Url = "https://picsum.photos/seed/bus4/600/400"
                        });
                });

            modelBuilder.Entity("BusServices.Models.BusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultSeats")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("OwnerContact")
                        .HasColumnType("bigint");

                    b.Property<string>("SeatLayoutJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusCategoryId");

                    b.ToTable("BusTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusCategoryId = 1,
                            DefaultSeats = 40,
                            Description = "40 Seater AC Bus with 2+2 layout",
                            Features = "AC, WiFi, Charging Port",
                            IsActive = true,
                            Name = "AC 2+2 Seater",
                            Owner = "ABC Travels",
                            OwnerContact = 9876543210L,
                            SeatLayoutJson = "{}"
                        },
                        new
                        {
                            Id = 2,
                            BusCategoryId = 2,
                            DefaultSeats = 30,
                            Description = "30 Sleeper AC Bus with comfortable beds",
                            Features = "AC, Blanket, Charging Port",
                            IsActive = true,
                            Name = "AC Sleeper",
                            Owner = "XYZ Travels",
                            OwnerContact = 9123456780L,
                            SeatLayoutJson = "{}"
                        },
                        new
                        {
                            Id = 3,
                            BusCategoryId = 3,
                            DefaultSeats = 45,
                            Description = "Luxury Volvo Express Bus",
                            Features = "AC, WiFi, TV, Charging Port",
                            IsActive = true,
                            Name = "Volvo Express",
                            Owner = "PQR Travels",
                            OwnerContact = 9988776655L,
                            SeatLayoutJson = "{}"
                        });
                });

            modelBuilder.Entity("BusServices.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<int>("BusCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("BusTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FromPlace")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0.0m);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Upcoming");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ToPlace")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TravelDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusCategoryId");

                    b.HasIndex("BusTypeId");

                    b.ToTable("Events", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSeats = 0,
                            BusCategoryId = 1,
                            BusTypeId = 1,
                            ContactInfo = "abc@gmail.com",
                            Description = "Comfortable overnight journey",
                            FromPlace = "Hyderabad",
                            IsActive = true,
                            Organizer = "ABC Travels",
                            Price = 1200.50m,
                            Status = "Upcoming",
                            Title = "Hyderabad to Bangalore",
                            ToPlace = "Bangalore",
                            TotalSeats = 0,
                            TravelDate = new DateTime(2025, 9, 8, 5, 42, 44, 389, DateTimeKind.Utc).AddTicks(5785)
                        },
                        new
                        {
                            Id = 2,
                            AvailableSeats = 0,
                            BusCategoryId = 2,
                            BusTypeId = 2,
                            ContactInfo = "xyz@gmail.com",
                            Description = "Luxury sleeper bus service",
                            FromPlace = "Chennai",
                            IsActive = true,
                            Organizer = "XYZ Travels",
                            Price = 1800.75m,
                            Status = "Upcoming",
                            Title = "Chennai to Pune",
                            ToPlace = "Pune",
                            TotalSeats = 0,
                            TravelDate = new DateTime(2025, 9, 10, 5, 42, 44, 389, DateTimeKind.Utc).AddTicks(5798)
                        },
                        new
                        {
                            Id = 3,
                            AvailableSeats = 0,
                            BusCategoryId = 3,
                            BusTypeId = 3,
                            ContactInfo = "pqr@gmail.com",
                            Description = "Fast express Volvo service",
                            FromPlace = "Delhi",
                            IsActive = true,
                            Organizer = "PQR Travels",
                            Price = 900.00m,
                            Status = "Upcoming",
                            Title = "Delhi to Jaipur",
                            ToPlace = "Jaipur",
                            TotalSeats = 0,
                            TravelDate = new DateTime(2025, 9, 7, 5, 42, 44, 389, DateTimeKind.Utc).AddTicks(5801)
                        });
                });

            modelBuilder.Entity("BusServices.Models.BusImage", b =>
                {
                    b.HasOne("BusServices.Models.Event", "Events")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Events");
                });

            modelBuilder.Entity("BusServices.Models.BusType", b =>
                {
                    b.HasOne("BusServices.Models.BusCategory", "BusCategory")
                        .WithMany("BusTypes")
                        .HasForeignKey("BusCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusCategory");
                });

            modelBuilder.Entity("BusServices.Models.Event", b =>
                {
                    b.HasOne("BusServices.Models.BusCategory", "BusCategory")
                        .WithMany()
                        .HasForeignKey("BusCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusServices.Models.BusType", "BusType")
                        .WithMany("Buses")
                        .HasForeignKey("BusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusCategory");

                    b.Navigation("BusType");
                });

            modelBuilder.Entity("BusServices.Models.BusCategory", b =>
                {
                    b.Navigation("BusTypes");
                });

            modelBuilder.Entity("BusServices.Models.BusType", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("BusServices.Models.Event", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
